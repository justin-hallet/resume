{"version":3,"sources":["Autodesk/autodesk.js","Moldflow/moldflow.js","STS/sts.js","GEC/gec.js","logo.svg","App.js","reportWebVitals.js","index.js"],"names":["company","require","module","exports","projects","key","data","str","ch","seed","h1","h2","i","length","charCodeAt","Math","imul","cyrb53","JSON","stringify","block","join","value","toString","link","url","href","target","image","src","window","location","alt","style","maxWidth","details","atoms","text","tagline","trigger","textAlign","margin","map","item","console","log","date","title","event","name","logo","job","role","push","team","skills","list","ptype","slice","reverse","App","className","autodesk","moldflow","sts","gec","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ff52ba65.chunk.js","sourcesContent":["var projects = [\n]\n\nvar company = require(\"./company.json\")\n\nmodule.exports = {\n    projects, \n    company\n}","var projects = [\n    require(\"./engineer.json\"),\n    require(\"./dynamic-series.json\"),\n    require(\"./ideas.json\"),\n    require(\"./part-adviser.json\"),\n    require(\"./pro-plastics-advisor.json\"),\n    require(\"./solidworks-moldflow-express.json\"),\n    require(\"./impa.json\"),\n    require(\"./plasticszone.json\"),\n    require(\"./manager.json\"),\n    require(\"./mold-adviser.json\"),\n    require(\"./shotscope.json\"),\n    require(\"./matrix-altanium.json\"),\n    require(\"./simalink.json\"),\n    require(\"./synergy.json\"),\n    require(\"./communicator.json\"),\n    require(\"./director.json\"),\n    require(\"./plastics-adviser.json\"),\n    require(\"./network-license-manager.json\"),    \n]\n\nvar company = require(\"./company.json\")\n\nmodule.exports = {\n    projects, \n    company\n}","var projects = [\n    require(\"./engineer.json\")\n]\n\nvar company = require(\"./company.json\")\n\nmodule.exports = {\n    projects, \n    company\n}","var projects = [\n    require(\"./engineer.json\")\n]\n\nvar company = require(\"./company.json\")\n\nmodule.exports = {\n    projects, \n    company\n}","export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import logo from './logo.svg';\nimport './App.css';\n\n\nimport {\n  Timeline,\n  Events,\n  UrlButton,\n  ImageEvent,\n  TextEvent,\n  YouTubeEvent,\n  TextAtom,\n} from '@merc/react-timeline';\n\nimport Collapsible from 'react-collapsible';\n\nimport * as autodesk from './Autodesk/autodesk';\nimport * as moldflow from './Moldflow/moldflow';\nimport * as sts from './STS/sts';\nimport * as gec from './GEC/gec';\n\n\n// console.log(JSON.stringify(moldflow));\n\nconst cyrb53 = function(str, seed = 0) {\n  let h1 = 0xdeadbeef ^ seed, h2 = 0x41c6ce57 ^ seed;\n  for (let i = 0, ch; i < str.length; i++) {\n      ch = str.charCodeAt(i);\n      h1 = Math.imul(h1 ^ ch, 2654435761);\n      h2 = Math.imul(h2 ^ ch, 1597334677);\n  }\n  h1 = Math.imul(h1 ^ (h1>>>16), 2246822507) ^ Math.imul(h2 ^ (h2>>>13), 3266489909);\n  h2 = Math.imul(h2 ^ (h2>>>16), 2246822507) ^ Math.imul(h1 ^ (h1>>>13), 3266489909);\n  return 4294967296 * (2097151 & h2) + (h1>>>0);\n};\n\nconst key = function(data) {\n  if (!data)\n    return \"\"\n  return cyrb53(JSON.stringify(data))\n}\n\nconst block = function(data) {\n  if (!data)\n    return [];\n  return [ data.join(' ') ];\n}\n\nconst value = function(data) {\n  if (!data)\n    return \"\";\n  return data.toString();\n}\n\nconst list = function(data) {\n  if (!data)\n    return [];\n  return [ data.join(', ') ];\n}\n\nconst link = function(data) {\n  return (data.url ? <UrlButton href={data.url} target='_blank'>More information...</UrlButton> : <span/>);\n}\n\nconst image = function(data) {\n  return (data.image ? \n    <img \n      src={window.location.href + \"/\" + data.image} \n      alt={data.image}\n      style={{maxWidth: '100%'}}\n    />\n    : <span />)\n}\n\nconst details = function(data) {\n  if (data.atoms.length === 0) {\n    return (<TextAtom text={data.tagline} key={key(data)}></TextAtom>)\n  }\n  return (<Collapsible  trigger={value(data.tagline)}>    \n            <div style={{textAlign: 'left'}}>\n              <p style={{margin: '.5em'}}></p>                          \n              {data.atoms.map((item) => {\n                return <TextAtom text={item} key={key(item)}></TextAtom>\n              })}\n            </div>\n            {image(data)}\n            {link(data)}       \n    </Collapsible>)\n}\n\nconst event = function(data) {\n  if (data.image) {\n    return (<ImageEvent \n              date={value(data.date)}\n              text={value(data.title)}\n              src={value(data.image)}\n              alt={value(data.title)}\n              key={key(data)}\n            >\n              {details({ \n                tagline : data.tagline,\n                atoms : block(data.details),\n                url : data.url\n              })}\n            </ImageEvent>)\n  }\n  else {\n    return (<TextEvent \n              date={value(data.date)} \n              text={value(data.title)} \n              key={key(data)}\n            >\n              {details({ \n                  tagline : data.tagline,\n                  atoms : block(data.details),\n                  url : data.url\n                })}\n            </TextEvent>)\n  }\n}\n\nconst company = function(data) {\n  console.log(JSON.stringify(data))\n  return event({\n    date : data.date,\n    title : data.name,\n    image : data.logo,\n    details : data.details,\n    tagline: data.tagline,\n    url : data.url\n  })\n}\n\nconst atoms = function(data) {\n  var atoms = [];\n  if (!data.job) {\n    if (data.role) atoms.push(\"Role: \" + value(data.role));\n    if (data.team) atoms.push(\"Team size: \" + value(data.team));\n    if (data.details) atoms.push(\"Details: \" + block(data.details));\n    if (data.skills) atoms.push(\"Skills: \" + list(data.skills));\n  }\n  return atoms;\n}\n\nconst ptype = function(data) {\n  return (!data.job ? \"Project: \" : \"Job: \");\n}\n\nconst projects = function(data) {\n  return data.slice(0).reverse().map((item)=> {\n        return <TextEvent date={value(item.date)} text={ptype(item) + value(item.name)} key={key(item)}>\n                <p style={{margin: '.5em'}}></p>     \n                {details({\n                  tagline : item.tagline,\n                  atoms : atoms(item),\n                  url : item.url,\n                  image : item.image\n                })}\n              </TextEvent>  \n  })\n}\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <p>\n          Justin Hallet\n        </p>\n      </header>\n      <Timeline>\n      <Events>\n        \n        {company(autodesk.company)}\n        {projects(autodesk.projects)}\n        \n        {company(moldflow.company)}\n        {projects(moldflow.projects)}\n        \n        {company(sts.company)}\n        {projects(sts.projects)}\n\n        {company(gec.company)} \n        {projects(gec.projects)}\n        \n      </Events>\n    </Timeline>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}